 ### set log levels ###
log4j.rootLogger = INFO,stdout,D,E

### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =  [%d{yyyy-MM-dd HH:mm:ss.SSS}]-[%c]-[%t] %x - %m%n

###显示SQL语句部分

log4j.logger.com.springframework=DEBUG
log4j.logger.org.mybatis=DEBUG  
log4j.logger.org.mybatis.common.jdbc.SimpleDataSource=DEBUG  
log4j.logger.org.mybatis.common.jdbc.ScriptRunner=DEBUG  
log4j.logger.org.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG  
log4j.logger.java.sql.Connection=DEBUG  
log4j.logger.java.sql.Statement=DEBUG  
log4j.logger.java.sql.PreparedStatement=DEBUG  
log4j.logger.java.sql.ResultSet=DEBUG


### 输出到日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File= ./obtain_logistics_info.log
## 输出INFO级别以上的日志
log4j.appender.D.Threshold = INFO
log4j.appender.D.Append = true
##文件最大尺寸
#log4j.appender.D.MaxFileSize=3MB
#可以灵活地指定布局模式，即使用用户指定的输出格式
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 保存异常信息到单独文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
 ## 异常日志文件名
log4j.appender.E.File = ./obtain_logistics_info_error.log
## 只输出ERROR级别以上的日志!!!
log4j.appender.E.Threshold = ERROR   
log4j.appender.E.Append = true
##文件最大尺寸
#log4j.appender.E.MaxFileSize=3MB
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern =[%-5p] %d{yyyy-MM-dd HH\:mm\:ss,SSS} method\:%l%n%m%n



#------------------------------------------------------------------------  
#    %m 输出代码中指定的消息   
#    %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL   
#    %r 输出自应用启动到输出该log信息耗费的毫秒数   
#    %c 输出所属的类目，通常就是所在类的全名   
#    %t 输出产生该日志事件的线程名   
#    %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”   
#    %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 ：10：28，921  
#    %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。  
#    %x Used to output the NDC (nested diagnostic context) associated with the thread that generated the logging event  
#    %X Used to output the MDC (mapped diagnostic context) associated with the thread that generated the logging event for specified key  
#------------------------------------------------------------------------ 